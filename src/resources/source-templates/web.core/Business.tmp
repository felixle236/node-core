import { Inject, Service } from 'typedi';
import { mapModel, mapModels } from '../../libs/common';
import { {PascalName} } from '../models/{PascalName}';
import { {PascalName}CreateRequest } from '../dtos/{camelName}/requests/{PascalName}CreateRequest';
import { {PascalName}FilterRequest } from '../dtos/{camelName}/requests/{PascalName}FilterRequest';
import { {PascalName}Response } from '../dtos/{camelName}/responses/{PascalName}Response';
import { {PascalName}UpdateRequest } from '../dtos/{camelName}/requests/{PascalName}UpdateRequest';
import { I{PascalName}Business } from '../interfaces/businesses/I{PascalName}Business';
import { I{PascalName}Repository } from '../interfaces/gateways/data/I{PascalName}Repository';
import { ResultListResponse } from '../dtos/common/ResultListResponse';
import { SystemError } from '../dtos/common/Exception';

@Service('{camelName}.business')
export class {PascalName}Business implements I{PascalName}Business {
    @Inject('{camelName}.repository')
    private readonly {camelName}Repository: I{PascalName}Repository;

    async find(filter: {PascalName}FilterRequest): Promise<ResultListResponse<{PascalName}Response>> {
        const [list, count] = await this.{camelName}Repository.find(filter);
        return filter.toResultList(mapModels({PascalName}Response, list), count);
    }

    async getById(id: number): Promise<{PascalName}Response | undefined> {
        const {camelName} = await this.{camelName}Repository.getById(id);
        return mapModel({PascalName}Response, {camelName});
    }

    async create(data: {PascalName}CreateRequest): Promise<{PascalName}Response | undefined> {
        const {camelName} = new {PascalName}();
        {camelName}.name = data.name;

        if (await this.{camelName}Repository.checkNameExist({camelName}.name))
            throw new SystemError(1005, 'name');

        const id = await this.{camelName}Repository.create({camelName});
        if (!id)
            throw new SystemError(5);

        const newData = await this.{camelName}Repository.getById(id);
        return mapModel({PascalName}Response, newData);
    }

    async update(id: number, data: {PascalName}UpdateRequest): Promise<{PascalName}Response | undefined > {
        const {camelName} = await this.{camelName}Repository.getById(id);
        if (!{camelName})
            throw new SystemError(1004, '{camelName}');

        {camelName}.name = data.name;

        if (await this.{camelName}Repository.checkNameExist({camelName}.name, id))
            throw new SystemError(1005, 'name');

        const result = await this.{camelName}Repository.update(id, {camelName});
        if (!result)
            throw new SystemError(5);

        const newData = await this.{camelName}Repository.getById(id);
        return mapModel({PascalName}Response, newData);
    }

    async delete(id: number): Promise<boolean> {
        const {camelName} = await this.{camelName}Repository.getById(id);
        if (!{camelName})
            throw new SystemError(1004, '{camelName}');

        return await this.{camelName}Repository.delete(id);
    }
}
