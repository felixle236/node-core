import { Authorized, Body, Delete, Get, JsonController, Param, Post, Put, QueryParams } from 'routing-controllers';
import { Inject, Service } from 'typedi';
import { {PascalName}Claim } from '../../constants/claims/{PascalName}Claim';
import { {PascalName}CreateRequest } from '../../web.core/dtos/{camelName}/requests/{PascalName}CreateRequest';
import { {PascalName}FilterRequest } from '../../web.core/dtos/{camelName}/requests/{PascalName}FilterRequest';
import { {PascalName}Response } from '../../web.core/dtos/{camelName}/responses/{PascalName}Response';
import { {PascalName}UpdateRequest } from '../../web.core/dtos/{camelName}/requests/{PascalName}UpdateRequest';
import { I{PascalName}Business } from '../../web.core/interfaces/businesses/I{PascalName}Business';
import { ResultListResponse } from '../../web.core/dtos/common/ResultListResponse';

@Service()
@JsonController('/{camelName}s')
export class {PascalName}Controller {
    @Inject('{camelName}.business')
    private readonly {camelName}Business: I{PascalName}Business;

    @Get('/')
    @Authorized({PascalName}Claim.GET)
    async find(@QueryParams() filter: {PascalName}FilterRequest): Promise<ResultListResponse<{PascalName}Response>> {
        return await this.{camelName}Business.find(filter);
    }

    @Get('/:id([0-9]+)')
    @Authorized({PascalName}Claim.GET)
    async getById(@Param('id') id: number): Promise<{PascalName}Response | undefined> {
        return await this.{camelName}Business.getById(id);
    }

    @Post('/')
    @Authorized({PascalName}Claim.CREATE)
    async create(@Body() data: {PascalName}CreateRequest): Promise<{PascalName}Response | undefined> {
        return await this.{camelName}Business.create(data);
    }

    @Put('/:id([0-9]+)')
    @Authorized({PascalName}Claim.UPDATE)
    async update(@Param('id') id: number, @Body() data: {PascalName}UpdateRequest): Promise<{PascalName}Response | undefined> {
        return await this.{camelName}Business.update(id, data);
    }

    @Delete('/:id([0-9]+)')
    @Authorized({PascalName}Claim.DELETE)
    async delete(@Param('id') id: number): Promise<boolean> {
        return await this.{camelName}Business.delete(id);
    }
}
