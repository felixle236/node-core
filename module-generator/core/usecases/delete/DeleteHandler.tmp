import { I{PascalName}Repository } from '@gateways/repositories/{folder}/I{PascalName}Repository';
import { MessageError } from '@shared/exceptions/message/MessageError';
import { SystemError } from '@shared/exceptions/SystemError';
import { UsecaseHandler } from '@shared/usecase/UsecaseHandler';
import { Inject, Service } from 'typedi';
import { {DeleteUsecaseName}Output } from './{DeleteUsecaseName}Output';

@Service()
export class {DeleteUsecaseName}Handler extends UsecaseHandler<string, {DeleteUsecaseName}Output> {
    constructor(
        @Inject('{lower_case_name}.repository') private readonly _{camelName}Repository: I{PascalName}Repository
    ) {
        super();
    }

    async handle(id: string): Promise<{DeleteUsecaseName}Output> {
        const {camelName} = await this._{camelName}Repository.get(id);
        if (!{camelName})
            throw new SystemError(MessageError.PARAM_NOT_EXISTS, '{moduleNameTextLowerCase}');

        const result = new {DeleteUsecaseName}Output();
        result.data = await this._{camelName}Repository.softDelete(id);
        return result;
    }
}
