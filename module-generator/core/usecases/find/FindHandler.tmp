import { Find{PascalName}Filter, I{PascalName}Repository } from '@gateways/repositories/{folder}/I{PascalName}Repository';
import { UsecaseHandler } from '@shared/usecase/UsecaseHandler';
import { Inject, Service } from 'typedi';
import { {FindUsecaseName}Input } from './{FindUsecaseName}Input';
import { {FindUsecaseName}Data, {FindUsecaseName}Output } from './{FindUsecaseName}Output';

@Service()
export class {FindUsecaseName}Handler extends UsecaseHandler<{FindUsecaseName}Input, {FindUsecaseName}Output> {
    constructor(
        @Inject('{lower_case_name}.repository') private readonly _{camelName}Repository: I{PascalName}Repository
    ) {
        super();
    }

    async handle(param: {FindUsecaseName}Input): Promise<{FindUsecaseName}Output> {
        const filter = new Find{PascalName}Filter();
        filter.setPagination(param.skip, param.limit);
        filter.keyword = param.keyword;

        const [{camelName}s, count] = await this._{camelName}Repository.findAndCount(filter);
        const result = new {FindUsecaseName}Output();
        result.setPagination(count, param.skip, param.limit);
        result.data = {camelName}s.map({camelName} => {
            const data = new {FindUsecaseName}Data();
            data.id = {camelName}.id;
            data.createdAt = {camelName}.createdAt;
            data.name = {camelName}.name;

            return data;
        });
        return result;
    }
}
