import { I{PascalName}Repository } from '@gateways/repositories/{folder}/I{PascalName}Repository';
import { MessageError } from '@shared/exceptions/message/MessageError';
import { SystemError } from '@shared/exceptions/SystemError';
import { QueryHandler } from '@shared/usecase/QueryHandler';
import { Inject, Service } from 'typedi';
import { Get{PascalName}ByIdQueryOutput } from './Get{PascalName}ByIdQueryOutput';

@Service()
export class Get{PascalName}ByIdQueryHandler implements QueryHandler<string, Get{PascalName}ByIdQueryOutput> {
    @Inject('{lower_case_name}.repository')
    private readonly _{camelName}Repository: I{PascalName}Repository;

    async handle(id: string): Promise<Get{PascalName}ByIdQueryOutput> {
        const {camelName} = await this._{camelName}Repository.getById(id);
        if (!{camelName})
            throw new SystemError(MessageError.PARAM_NOT_EXISTS, '{camelName}');

        const result = new Get{PascalName}ByIdQueryOutput();
        result.setData({camelName});
        return result;
    }
}
