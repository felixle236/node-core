import { {PascalName} } from '@domain/entities/{folder}/{PascalName}';
import { I{PascalName}Repository } from '@gateways/repositories/{folder}/I{PascalName}Repository';
import { MessageError } from '@shared/exceptions/message/MessageError';
import { SystemError } from '@shared/exceptions/SystemError';
import { UsecaseHandler } from '@shared/usecase/UsecaseHandler';
import { Inject, Service } from 'typedi';
import { {UpdateUsecaseName}Input } from './{UpdateUsecaseName}Input';
import { {UpdateUsecaseName}Output } from './{UpdateUsecaseName}Output';

@Service()
export class {UpdateUsecaseName}Handler extends UsecaseHandler<{UpdateUsecaseName}Input, {UpdateUsecaseName}Output> {
    constructor(
        @Inject('{lower_case_name}.repository') private readonly _{camelName}Repository: I{PascalName}Repository
    ) {
        super();
    }

    async handle(id: string, param: {UpdateUsecaseName}Input): Promise<{UpdateUsecaseName}Output> {
        const data = new {PascalName}();
        data.name = param.name;

        const {camelName} = await this._{camelName}Repository.get(id);
        if (!{camelName})
            throw new SystemError(MessageError.PARAM_NOT_EXISTS, '{moduleNameTextLowerCase}');

        const isExist = await this._{camelName}Repository.checkNameExist(data.name, id);
        if (isExist)
            throw new SystemError(MessageError.PARAM_EXISTED, { t: 'name' });

        const result = new {UpdateUsecaseName}Output();
        result.data = await this._{camelName}Repository.update(id, data);
        return result;
    }
}
