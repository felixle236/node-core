import { {PascalName} } from '@domain/entities/{folder}/{PascalName}';
import { I{PascalName}Repository } from '@gateways/repositories/{folder}/I{PascalName}Repository';
import { MessageError } from '@shared/exceptions/message/MessageError';
import { SystemError } from '@shared/exceptions/SystemError';
import { CommandHandler } from '@shared/usecase/CommandHandler';
import { CreateClientCommandOutput } from '@usecases/user/client/commands/create-client/CreateClientCommandOutput';
import { validateDataInput } from '@utils/validator';
import { Inject, Service } from 'typedi';
import { Create{PascalName}CommandInput } from './Create{PascalName}CommandInput';
import { Create{PascalName}CommandOutput } from './Create{PascalName}CommandOutput';

@Service()
export class Create{PascalName}CommandHandler implements CommandHandler<Create{PascalName}CommandInput, Create{PascalName}CommandOutput> {
    @Inject('{lower_case_name}.repository')
    private readonly _{camelName}Repository: I{PascalName}Repository;

    async handle(param: Create{PascalName}CommandInput): Promise<Create{PascalName}CommandOutput> {
        await validateDataInput(param);

        const data = new {PascalName}();
        data.name = param.name;

        const isExist = await this._{camelName}Repository.checkNameExist(data.name);
        if (isExist)
            throw new SystemError(MessageError.PARAM_EXISTED, 'name');

        const id = await this._{camelName}Repository.create(data);
        const result = new CreateClientCommandOutput();
        result.setData(id);
        return result;
    }
}
