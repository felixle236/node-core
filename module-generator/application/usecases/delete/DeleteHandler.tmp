import { I{PascalName}Repository } from 'application/interfaces/repositories/{folder}/I{PascalName}Repository';
import { NotFoundError } from 'shared/exceptions/NotFoundError';
import { IUsecaseHandler } from 'shared/usecase/interfaces/IUsecaseHandler';
import { Inject, Service } from 'typedi';
import { {DeleteUsecaseName}Output } from './{DeleteUsecaseName}Output';

@Service()
export class {DeleteUsecaseName}Handler implements IUsecaseHandler<string, {DeleteUsecaseName}Output> {
    constructor(
        @Inject('{lower_case_name}.repository') private readonly _{camelName}Repository: I{PascalName}Repository
    ) {}

    async handle(id: string): Promise<{DeleteUsecaseName}Output> {
        const {camelName} = await this._{camelName}Repository.get(id);
        if (!{camelName})
            throw new NotFoundError();

        const result = new {DeleteUsecaseName}Output();
        result.data = await this._{camelName}Repository.softDelete(id);
        return result;
    }
}
