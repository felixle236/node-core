import * as validator from 'class-validator';
import { {PascalName}CreateData } from '../dtos/{camelName}/data/{PascalName}CreateData';
import { {PascalName}UpdateData } from '../dtos/{camelName}/data/{PascalName}UpdateData';
import { I{PascalName} } from '../gateways/models/I{PascalName}';
import { SystemError } from '../dtos/common/Exception';

export class {PascalName} implements I{PascalName} {
    constructor(private readonly _data = {} as I{PascalName}) { }

    get id(): number {
        return this._data.id;
    }

    get createdAt(): Date {
        return this._data.createdAt;
    }

    get updatedAt(): Date {
        return this._data.updatedAt;
    }

    get deletedAt(): Date | undefined {
        return this._data.deletedAt;
    }

    set deletedAt(val: Date | undefined) {
        this._data.deletedAt = val;
    }

    get name(): string {
        return this._data.name;
    }

    set name(val: string) {
        if (validator.isEmpty(val))
            throw new SystemError(MessageError.PARAM_REQUIRED, 'name');
        if (!validator.isString(val))
            throw new SystemError(MessageError.PARAM_INVALID, 'name');
        if (val.length > 50)
            throw new SystemError(MessageError.PARAM_LEN_LESS_OR_EQUAL, 'name', 50);

        this._data.name = val;
    }

    /* handlers */

    toCreateData() {
        const data = new {PascalName}CreateData();
        data.name = this._data.name;
        return data;
    }

    toUpdateData() {
        const data = new {PascalName}UpdateData();
        data.name = this._data.name;
        return data;
    }
}
