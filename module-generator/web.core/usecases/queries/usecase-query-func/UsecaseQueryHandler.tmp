import { Inject, Service } from 'typedi';
import { {UsecaseName}Query } from './{UsecaseName}Query';
import { {UsecaseName}QueryResult } from './{UsecaseName}QueryResult';
import { IQueryHandler } from '../../../../domain/common/usecase/interfaces/IQueryHandler';
import { I{PascalName}Repository } from '../../../../gateways/repositories/{folder}/I{PascalName}Repository';
import { MessageError } from '../../../../domain/common/exceptions/message/MessageError';
import { SystemError } from '../../../../domain/common/exceptions/SystemError';

@Service()
export class {UsecaseName}QueryHandler implements IQueryHandler<{UsecaseName}Query, {UsecaseName}QueryResult> {
    @Inject('{lower_case_name}.repository')
    private readonly _{camelName}Repository: I{PascalName}Repository;

    async handle(param: {UsecaseName}Query): Promise<{UsecaseName}QueryResult> {
        if (!param.id)
            throw new SystemError(MessageError.PARAM_REQUIRED, 'id');

        const {camelName} = await this._{camelName}Repository.getById(param.id);
        if (!{camelName})
            throw new SystemError(MessageError.PARAM_NOT_EXISTS, '{camelName}');

        return new {UsecaseName}QueryResult({camelName});
    }
}
