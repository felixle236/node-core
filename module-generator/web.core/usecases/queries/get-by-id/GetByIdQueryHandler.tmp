import { Inject, Service } from 'typedi';
import { Get{PascalName}ByIdQuery } from './Get{PascalName}ByIdQuery';
import { Get{PascalName}ByIdQueryResult } from './Get{PascalName}ByIdQueryResult';
import { IQueryHandler } from '../../../../domain/common/usecase/interfaces/IQueryHandler';
import { I{PascalName}Repository } from '../../../../gateways/repositories/{folder}/I{PascalName}Repository';
import { MessageError } from '../../../../domain/common/exceptions/message/MessageError';
import { SystemError } from '../../../../domain/common/exceptions/SystemError';

@Service()
export class Get{PascalName}ByIdQueryHandler implements IQueryHandler<Get{PascalName}ByIdQuery, Get{PascalName}ByIdQueryResult> {
    @Inject('{camelName}.repository')
    private readonly _{camelName}Repository: I{PascalName}Repository;

    async handle(param: Get{PascalName}ByIdQuery): Promise<Get{PascalName}ByIdQueryResult> {
        if (!param.id)
            throw new SystemError(MessageError.PARAM_REQUIRED, 'id');

        const {camelName} = await this._{camelName}Repository.getById(param.id);
        if (!{camelName})
            throw new SystemError(MessageError.PARAM_NOT_EXISTS, '{camelName}');

        return new Get{PascalName}ByIdQueryResult({camelName});
    }
}
