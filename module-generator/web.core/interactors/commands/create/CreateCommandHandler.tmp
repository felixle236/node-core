import { Inject, Service } from 'typedi';
import { Create{PascalName}Command } from './Create{PascalName}Command';
import { ICommandHandler } from '../../../../domain/common/interactor/interfaces/ICommandHandler';
import { I{PascalName}Repository } from '../../../../gateways/repositories/I{PascalName}Repository';
import { MessageError } from '../../../../domain/common/exceptions/message/MessageError';
import { {PascalName} } from '../../../../domain/entities/{PascalName}';
import { SystemError } from '../../../../domain/common/exceptions/SystemError';

@Service()
export class Create{PascalName}CommandHandler implements ICommandHandler<Create{PascalName}Command, string> {
    @Inject('{camelName}.repository')
    private readonly _{camelName}Repository: I{PascalName}Repository;

    async handle(param: Create{PascalName}Command): Promise<string> {
        const data = new {PascalName}();
        data.name = param.name;

        const isExist = await this._{camelName}Repository.checkNameExist(data.name);
        if (isExist)
            throw new SystemError(MessageError.PARAM_EXISTED, 'name');

        const id = await this._{camelName}Repository.create(data);
        if (!id)
            throw new SystemError(MessageError.DATA_CANNOT_SAVE);
        return id;
    }
}
