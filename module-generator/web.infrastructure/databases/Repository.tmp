import { BaseRepository } from './base/BaseRepository';
import { Find{PascalName}Query } from '../../../../web.core/interactors/{camelName}/queries/find-{camelName}/Find{PascalName}Query';
import { I{PascalName}Repository } from '../../../../web.core/gateways/repositories/I{PascalName}Repository';
import { {UPPER_CASE_NAME}_SCHEMA } from '../schemas/{PascalName}Schema';
import { {PascalName} } from '../../../../web.core/domain/entities/{PascalName}';
import { {PascalName}Db } from '../entities/{PascalName}Db';
import { Service } from 'typedi';
import { SortType } from '../../../../web.core/domain/common/database/SortType';

@Service('{camelName}.repository')
export class {PascalName}Repository extends BaseRepository<{PascalName}, {PascalName}Db, string> implements I{PascalName}Repository {
    constructor() {
        super({PascalName}Db, {UPPER_CASE_NAME}_SCHEMA);
    }

    async findAndCount(param: Find{PascalName}Query): Promise<[{PascalName}[], number]> {
        let query = this.repository.createQueryBuilder({UPPER_CASE_NAME}_SCHEMA.TABLE_NAME);

        if (param.keyword) {
            const keyword = `%${param.keyword}%`;
            query = query.andWhere(`${{UPPER_CASE_NAME}_SCHEMA.TABLE_NAME}.${{UPPER_CASE_NAME}_SCHEMA.COLUMNS.NAME} ILIKE :keyword`, { keyword });
        }

        query = query
            .orderBy(`${{UPPER_CASE_NAME}_SCHEMA.TABLE_NAME}.${{UPPER_CASE_NAME}_SCHEMA.COLUMNS.NAME}`, SortType.ASC)
            .skip(param.skip)
            .take(param.limit);

        const [list, count] = await query.getManyAndCount();
        return [list.map(item => item.toEntity()), count];
    }

    async checkNameExist(name: string, excludeId?: string): Promise<boolean> {
        let query = this.repository.createQueryBuilder({UPPER_CASE_NAME}_SCHEMA.TABLE_NAME)
            .where(`lower(${{UPPER_CASE_NAME}_SCHEMA.TABLE_NAME}.${{UPPER_CASE_NAME}_SCHEMA.COLUMNS.NAME}) = lower(:name)`, { name });

        if (excludeId)
            query = query.andWhere(`${{UPPER_CASE_NAME}_SCHEMA.TABLE_NAME}.${{UPPER_CASE_NAME}_SCHEMA.COLUMNS.ID} != :id`, { id: excludeId });

        const result = await query.getOne();
        return !!result;
    }
}
